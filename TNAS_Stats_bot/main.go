package main

import (
	"context"
	"fmt"
	"log"
	"log/slog"
	"os"
	"os/signal"
	"syscall"
	"time"

	"tg_bot/internal/adapters"
	"tg_bot/internal/config"
	"tg_bot/internal/entities"
	"tg_bot/internal/usecases"

	"github.com/joho/godotenv"
)

func setupLogger() *slog.Logger {
	logger := slog.New(slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{
		Level: slog.LevelInfo,
	}))
	return logger
}

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
	logger := setupLogger()

	if err := godotenv.Load(".env"); err != nil {
		log.Fatal(err)
	}

	// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	cfg, err := config.LoadConfig(logger)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∞–¥–∞–ø—Ç–µ—Ä–∞
	tgAdapter, err := adapters.NewTelegramAdapter(cfg.BotToken, cfg.ChatID)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –∞–¥–∞–ø—Ç–µ—Ä–∞: %v", err)
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏
	tgAdapter.SetDebug(true)

	ip := "192.168.10.15"
	port := 9222
	user := os.Getenv("USER")
	password := os.Getenv("PASSWORD")

	avail, err := usecases.SSHClient(ip, port, user, password)

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
	status := "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω‚õîÔ∏è"
	if err == nil {
		status = "–ü–æ–¥–∫–ª—é—á–µ–Ω‚úÖ"
	} else {
		log.Printf("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: %v", err) // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
	var output, output1 string
	date := time.Now().Format("02.01.2006")
	time := time.Now().Format("15:04")
	min := "100G"

	//availMemory, err := strconv.Atoi(avail)
	if min > avail {
		output1 += fmt.Sprintf("\n‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è–û—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –º–µ—Å—Ç–æ. –ü–æ–º–µ–Ω—è–π—Ç–µ –¥–∏—Å–∫")
	}

	output = fmt.Sprintf("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ TNAS:\n\n–î–∞—Ç–∞: %s\n–í—Ä–µ–º—è: %s\n–°—Ç–∞—Ç—É—Å: %s\n", date, time, status)
	if avail != "" {
		output += fmt.Sprintf("–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç–∞: %s\n%s\n", avail, output1)
	} else {
		fmt.Println("–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç–∞: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
	ctx := context.Background()
	if err := tgAdapter.SendMessage(ctx, output); err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è", "error", err)
	} else {
		logger.Info("–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
	sendStatsService := usecases.NewSendStatsService(tgAdapter)

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä
	updates := tgAdapter.GetUpdatesChan()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	ctx, stop := signal.NotifyContext(context.Background(), os.Interrupt, syscall.SIGTERM)
	defer stop()

	logger.Info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥...")

	for {
		select {
		case <-ctx.Done():
			stopMessage := "üî¥ –ë–æ—Ç TNAS Stat Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
			if err := tgAdapter.SendMessage(context.Background(), stopMessage); err != nil {
				logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ", "error", err)
			}
			logger.Info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
			return
		case update := <-updates:
			if update.Message == nil {
				continue
			}

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥ –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
			if update.Message.Chat.ID != cfg.ChatID {
				continue
			}

			if update.Message.IsCommand() {
				switch update.Message.Command() {
				case "stats":
					handleStatsCommand(ctx, sendStatsService, logger)
				}
			}
		}
	}
}

func handleStatsCommand(ctx context.Context, sender *usecases.SendStatsService, logger *slog.Logger) {
	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TNAS
	const (
		ip       = "192.168.10.15"
		port     = 22
		user     = "root"
		password = "Qwerty"
	)

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	avail, err := usecases.SSHClient(ip, port, user, password)
	status := "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
	if err == nil {
		status = "–ü–æ–¥–∫–ª—é—á–µ–Ω"
	}

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	stats := &entities.Stats{
		Status:     status,
		MemoryLeft: parseMemory(avail), // –ù—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	if err := sender.SendStats(ctx, stats); err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", "error", err)
	}
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–æ
func parseMemory(avail string) int {
	if len(avail) < 1 {
		return 0
	}

	// –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
	var value int
	_, err := fmt.Sscanf(avail, "%d", &value)
	if err != nil {
		return 0
	}
	return value
}
